name: "Classroom Autograder – Unit 8: Variables & Methods"

on:
  push:
  pull_request:

jobs:
  autograde:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test dependencies
        run: |
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29

      - name: Create Jest setup
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF

      - name: Create Jest config
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: [
              '**/__tests__/**/*.test.cjs',
              '**/?(*.)+(spec|test).[jt]s?(x)'
            ]
          };
          EOF

      - name: Create Jest test
        run: |
          mkdir -p __tests__
          cat > __tests__/script.test.cjs <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { JSDOM } = require('jsdom');

          // Extract numeric value safely and cast to Number()
          function readNumberFromElement(document, id) {
            const el = document.getElementById(id);
            if (!el) return NaN;
            const txt = ((el.textContent || el.innerText || '').trim())
                      || (typeof el.value === 'string' ? el.value.trim() : '');
            const match = txt.match(/-?\d+(?:\.\d+)?/);
            return match ? Number(match[0]) : NaN;
          }

          // Run student script and try to invoke calculate()
          function runStudentScriptAndTryCall(window) {
            const scriptPath = path.join(process.cwd(), 'script.js');
            if (fs.existsSync(scriptPath)) {
              const code = fs.readFileSync(scriptPath, 'utf8');
              window.eval(code);
              try { window.eval('if (typeof calculate==="function"){calculate();}'); } catch (_) {}
            }
          }

          function triggerStudentCalculation(window, document) {
            document.dispatchEvent(new window.Event('DOMContentLoaded', { bubbles: true }));
            window.dispatchEvent(new window.Event('load'));
            if (typeof window.calculate === 'function') window.calculate();
            (document.getElementById('calcBtn') || document.querySelector('button'))?.click();
            for (const id of ['temp', 'radius']) {
              const el = document.getElementById(id);
              if (el) {
                el.dispatchEvent(new window.Event('input', { bubbles: true }));
                el.dispatchEvent(new window.Event('change', { bubbles: true }));
              }
            }
          }

          describe('Temperature and Circle Area Conversion (DOM Output)', () => {
            let dom, document, window;

            beforeEach(() => {
              const html = `
                <!DOCTYPE html>
                <html>
                  <body>
                    <input id="temp" value="212">
                    <input id="radius" value="5">
                    <div id="tempC"></div>
                    <div id="area"></div>
                    <button id="calcBtn">Calculate</button>
                  </body>
                </html>`;
              dom = new JSDOM(html, { url: 'http://localhost/' });
              window = dom.window;
              document = window.document;

              runStudentScriptAndTryCall(window);
              triggerStudentCalculation(window, document);
            });

            test('has required output elements tempC and area', () => {
              expect(document.getElementById('tempC')).not.toBeNull();
              expect(document.getElementById('area')).not.toBeNull();
            });

            test('displays correct Celsius for 212°F', () => {
              let c = readNumberFromElement(document, 'tempC');
              c = Number(c);
              expect(Number.isNaN(c)).toBe(false);
              expect(Math.abs(c - 100)).toBeLessThan(0.5);
            });

            test('displays correct area for radius=5', () => {
              let a = readNumberFromElement(document, 'area');
              a = Number(a);
              const expected = Math.PI * 25;
              expect(Number.isNaN(a)).toBe(false);
              expect(Math.abs(a - expected)).toBeLessThan(0.5);
            });
          });
          EOF

      - name: Run tests and create JSON results
        id: jest
        continue-on-error: true
        run: npx jest --runInBand --verbose --json --outputFile=jest-results.json

      - name: Upload raw results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-results
          path: jest-results.json

      - name: Summarize results for students
        if: always()
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const r = JSON.parse(fs.readFileSync('jest-results.json','utf8'));
          const total = r.numTotalTests ?? 0;
          const passed = r.numPassedTests ?? 0;
          const failed = r.numFailedTests ?? 0;
          const map = new Map();
          for (const t of (r.testResults||[]).flatMap(x => x.assertionResults||[])) map.set(t.fullName, t.status);

          function mark(ok, label) {
            return `${ok ? '✅' : '❌'} ${label}`;
          }

          const checks = [
            ["has required output elements tempC and area", "Elements #tempC and #area exist."],
            ["displays correct Celsius for 212°F", "Celsius value should appear on screen and be ≈100 for 212°F."],
            ["displays correct area for radius=5", "Area should appear on screen and be ≈78.54 for radius 5."]
          ];

          let lines = [];
          lines.push(`# Unit 8 Autograder Summary`);
          lines.push(`**Passed:** ${passed}/${total}  ·  **Failed:** ${failed}\n`);
          lines.push(`## What you got right / need to fix\n`);
          for (const [name, hint] of checks) {
            const ok = map.get(name) === 'passed';
            lines.push(mark(ok, name));
            if (!ok) lines.push(`   - Fix: ${hint}`);
          }
          lines.push(`\n### Common Fixes`);
          lines.push(`- Your HTML must include inputs with ids \`temp\`, \`radius\`, and outputs with ids \`tempC\`, \`area\`.`);
          lines.push(`- Display results **on the page**, not only in \`console.log\`.`);
          lines.push(`- Use the example function below as a reference:\n`);
          lines.push("```js\nfunction calculate() {\n  let tempF = Number(document.getElementById('temp').value);\n  let radius = Number(document.getElementById('radius').value);\n  let celsius = (tempF - 32) * 5 / 9;\n  let area = Math.PI * Math.pow(radius, 2);\n  document.getElementById('tempC').textContent = celsius.toFixed(2);\n  document.getElementById('area').textContent = area.toFixed(2);\n}\n```");

          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, lines.join('\n'));
          NODE

      - name: Fail if any test failed
        if: steps.jest.outcome == 'failure'
        run: exit 1
