# .github/classroom.yml
# GitHub Classroom Autograding Configuration

name: "Temperature and Circle Area Assignment"
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout student repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test dependencies (pin jsdom to CJS version)
        run: |
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29

      - name: Create Jest setup (polyfills for TextEncoder/TextDecoder)
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF

      - name: Create Jest config (use jsdom env, setup file, and match .cjs tests)
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: [
              '**/__tests__/**/*.test.cjs',
              '**/?(*.)+(spec|test).[jt]s?(x)'
            ]
          };
          EOF

      - name: Create test file
        run: |
          mkdir -p __tests__
          cat > __tests__/script.test.cjs <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { JSDOM } = require('jsdom');

          // Read number from either text or value (handles div/span OR input misuse)
          function readNumberFromElement(document, id) {
            const el = document.getElementById(id);
            if (!el) return NaN;
            const txt = ((el.textContent || el.innerText || '').trim()) ||
                        (typeof el.value === 'string' ? el.value.trim() : '');
            const match = txt.match(/-?\\d+(?:\\.\\d+)?/);
            return match ? Number(match[0]) : NaN;
          }

          // Run student's script inside the JSDOM window
          function runStudentScript(window) {
            const scriptPath = path.join(process.cwd(), 'script.js');
            if (fs.existsSync(scriptPath)) {
              const code = fs.readFileSync(scriptPath, 'utf8');
              window.eval(code);
            }
          }

          // Try to trigger student logic in multiple common ways
          function triggerStudentCalculation(window, document) {
            // 1) Exposed function
            if (typeof window.calculate === 'function') {
              window.calculate();
            }

            // 2) Button click (supports addEventListener or inline onclick)
            const btn = document.getElementById('calcBtn') || document.querySelector('button');
            if (btn) btn.click();

            // 3) Input/change events
            const temp = document.getElementById('temp');
            const radius = document.getElementById('radius');
            if (temp) {
              temp.dispatchEvent(new window.Event('input', { bubbles: true }));
              temp.dispatchEvent(new window.Event('change', { bubbles: true }));
            }
            if (radius) {
              radius.dispatchEvent(new window.Event('input', { bubbles: true }));
              radius.dispatchEvent(new window.Event('change', { bubbles: true }));
            }
          }

          describe('Temperature and Circle Area Conversion (DOM Output)', () => {
            let dom, document, window;

            beforeEach(() => {
              // Pre-fill inputs BEFORE loading the student's script
              const html = `
                <!DOCTYPE html>
                <html>
                  <body>
                    <input id="temp" value="212">
                    <input id="radius" value="5">
                    <div id="tempC"></div>
                    <div id="area"></div>
                    <button id="calcBtn">Calculate</button>
                  </body>
                </html>`;
              dom = new JSDOM(html, { url: 'http://localhost/' });
              window = dom.window;
              document = window.document;

              // Load student's script (solutions that compute on load will now write outputs)
              runStudentScript(window);

              // Also try to trigger logic for event-driven solutions
              triggerStudentCalculation(window, document);
            });

            test('has required output elements tempC and area', () => {
              expect(document.getElementById('tempC')).not.toBeNull();
              expect(document.getElementById('area')).not.toBeNull();
            });

            test('displays correct Celsius for 212Â°F', () => {
              const c = readNumberFromElement(document, 'tempC');
              expect(Number.isNaN(c)).toBe(false);
              expect(Math.abs(c - 100)).toBeLessThan(0.5);
            });

            test('displays correct area for radius=5', () => {
              const a = readNumberFromElement(document, 'area');
              const expected = Math.PI * 25; // r^2 = 25
              expect(Number.isNaN(a)).toBe(false);
              expect(Math.abs(a - expected)).toBeLessThan(0.5);
            });
          });
          EOF

      - name: Run Jest tests
        run: npx jest --runInBand --verbose
