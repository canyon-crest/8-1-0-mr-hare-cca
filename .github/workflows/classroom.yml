name: "Classroom Autograder – Unit 8: Variables & Methods"

on:
  push:
  pull_request:

jobs:
  autograde:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test dependencies
        run: |
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29

      - name: Create Jest setup
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF

      - name: Create Jest config
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: [
              '**/__tests__/**/*.test.cjs',
              '**/?(*.)+(spec|test).[jt]s?(x)'
            ]
          };
          EOF

      - name: Create Jest test (loads index.html + scripts like a browser)
        run: |
          mkdir -p __tests__
          cat > __tests__/script.test.cjs <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { JSDOM } = require('jsdom');

          // Locate index.html in common student locations
          function findIndexPath() {
            const cands = [
              'index.html',
              path.join('public', 'index.html'),
              path.join('src', 'index.html'),
              path.join('docs', 'index.html')
            ];
            for (const p of cands) if (fs.existsSync(p)) return p;
            return null;
          }

          // Helper: wait for window 'load' + small settle delay
          async function waitForLoad(window, ms = 200) {
            await new Promise(res => window.addEventListener('load', () => res(), { once: true }));
            await new Promise(res => window.setTimeout(res, ms));
          }

          // Extract first numeric token and cast with Number()
          function readNumberFromElement(document, id) {
            const el = document.getElementById(id);
            if (!el) return NaN;
            const raw = ((el.textContent ?? el.innerText ?? '').trim())
                     || (typeof el.value === 'string' ? el.value.trim() : '');
            const m = raw.match(/-?\d+(?:\.\d+)?/);
            return m ? Number(m[0]) : NaN;
          }

          // Try many common triggers students use
          function triggerAll(window, document) {
            // lifecycle (in case they attached late listeners)
            document.dispatchEvent(new window.Event('DOMContentLoaded', { bubbles: true }));
            window.dispatchEvent(new window.Event('load'));

            // exposed function
            if (typeof window.calculate === 'function') window.calculate();

            // click all buttons (covers inline onclick and addEventListener)
            Array.from(document.querySelectorAll('button')).forEach(btn => btn.click());

            // inputs events (reactive solutions)
            ['temp','radius'].forEach(id => {
              const el = document.getElementById(id);
              if (el) {
                el.dispatchEvent(new window.Event('input', { bubbles: true }));
                el.dispatchEvent(new window.Event('change', { bubbles: true }));
              }
            });
          }

          describe('Temperature and Circle Area Conversion (DOM Output)', () => {
            let dom, window, document, indexPath;

            beforeAll(() => {
              indexPath = findIndexPath();
              if (!indexPath) {
                throw new Error('index.html not found. Place it at ./index.html or public/src/docs.');
              }
            });

            beforeEach(async () => {
              dom = await JSDOM.fromFile(indexPath, {
                url: 'http://localhost/',
                runScripts: 'dangerously',
                resources: 'usable' // allow <script src="..."> to load
              });
              window = dom.window;
              document = window.document;
              await waitForLoad(window); // wait for scripts to run
            });

            test('has required output elements tempC and area', () => {
              expect(document.getElementById('tempC')).not.toBeNull();
              expect(document.getElementById('area')).not.toBeNull();
            });

            test('displays correct Celsius for 212°F', async () => {
              // Ensure inputs exist
              const t = document.getElementById('temp');
              const r = document.getElementById('radius');
              expect(t).not.toBeNull();
              expect(r).not.toBeNull();

              // Set BOTH inputs (many students compute both at once)
              t.value = '212';
              r.value = '5';

              triggerAll(window, document);
              await new Promise(res => window.setTimeout(res, 50));

              let c = readNumberFromElement(document, 'tempC');
              c = Number(c);
              expect(Number.isNaN(c)).toBe(false);
              expect(Math.abs(c - 100)).toBeLessThan(0.5);
            });

            test('displays correct area for radius=5', async () => {
              const t = document.getElementById('temp');
              const r = document.getElementById('radius');
              expect(t).not.toBeNull();
              expect(r).not.toBeNull();

              // Set BOTH inputs
              t.value = '212';
              r.value = '5';

              triggerAll(window, document);
              await new Promise(res => window.setTimeout(res, 50));

              let a = readNumberFromElement(document, 'area');
              a = Number(a);
              const expected = Math.PI * 25;
              expect(Number.isNaN(a)).toBe(false);
              expect(Math.abs(a - expected)).toBeLessThan(0.5);
            });
          });
          EOF

      - name: Run tests and create JSON results
        id: jest
        continue-on-error: true
        run: npx jest --runInBand --verbose --json --outputFile=jest-results.json

      - name: Upload raw results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-results
          path: jest-results.json

      - name: Summarize results for students
        if: always()
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const r = JSON.parse(fs.readFileSync('jest-results.json','utf8'));
          const total = r.numTotalTests ?? 0;
          const passed = r.numPassedTests ?? 0;
          const failed = r.numFailedTests ?? 0;
          const map = new Map();
          for (const t of (r.testResults||[]).flatMap(x => x.assertionResults||[])) map.set(t.fullName, t.status);

          const checks = [
            ["has required output elements tempC and area", "Add <div id=\"tempC\"></div> and <div id=\"area\"></div> to your HTML."],
            ["displays correct Celsius for 212°F", "Write ~100 into #tempC for 212°F; your script must run on load, button click, or via calculate()."],
            ["displays correct area for radius=5", "Write ~78.54 into #area for radius 5; your script must run on load, button click, or via calculate()."]
          ];

          function mk(ok, label) { return `${ok ? '✅' : '❌'} ${label}`; }

          let out = [];
          out.push(`# Unit 8 Autograder Summary`);
          out.push(`**Passed:** ${passed}/${total}  ·  **Failed:** ${failed}\n`);
          out.push(`## What you got right / need to fix\n`);
          for (const [name, hint] of checks) {
            const ok = map.get(name) === 'passed';
            out.push(mk(ok, name));
            if (!ok) out.push(`   - Fix: ${hint}`);
          }
          out.push(`\n### Requirements recap`);
          out.push(`- Inputs: <input id="temp"> and <input id="radius">`);
          out.push(`- Outputs on screen: <div id="tempC"> and <div id="area">`);
          out.push(`- Your JS must run when the page loads, when a button is clicked, or via a 'calculate()' function.`);
          out.push(`\n### Example Implementation`);
          out.push("```js\nfunction calculate() {\n  let tempF = Number(document.getElementById('temp').value);\n  let radius = Number(document.getElementById('radius').value);\n  let celsius = (tempF - 32) * 5 / 9;\n  let area = Math.PI * Math.pow(radius, 2);\n  document.getElementById('tempC').textContent = celsius.toFixed(2);\n  document.getElementById('area').textContent = area.toFixed(2);\n}\n```");
          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, out.join('\n'));
          NODE

      - name: Fail if any test failed
        if: steps.jest.outcome == 'failure'
        run: exit 1
